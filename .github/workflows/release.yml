name: Release
env:
  APP_NAME: moon
  MACOSX_DEPLOYMENT_TARGET: '10.13'
on:
  push:
    branches:
      - master
    tags:
      - v*
  pull_request:
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          # MacOS
          - host: macos-latest
            target: x86_64-apple-darwin
            architecture: x64
            build: node ./scripts/buildBinary.mjs
            artifacts: moon

          # Windows
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            architecture: x64
            build: node ./scripts/buildBinary.mjs
            artifacts: moon.exe

          # Linux GNU
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            architecture: x64
            docker: |
              docker pull $DOCKER_REGISTRY_URL/napi-rs/napi-rs/nodejs-rust:lts-debian
              docker tag $DOCKER_REGISTRY_URL/napi-rs/napi-rs/nodejs-rust:lts-debian builder
            build: |
              docker run --rm -e TARGET -v ~/.cargo/git:/root/.cargo/git -v ~/.cargo/registry:/root/.cargo/registry -v $(pwd):/build -w /build builder node ./scripts/buildBinary.mjs
            artifacts: moon

          # Linux MUSL
          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            architecture: x64
            docker: |
              docker pull $DOCKER_REGISTRY_URL/napi-rs/napi-rs/nodejs-rust:lts-alpine
              docker tag $DOCKER_REGISTRY_URL/napi-rs/napi-rs/nodejs-rust:lts-alpine builder
            build:
              docker run --rm -e TARGET -v ~/.cargo/git:/root/.cargo/git -v
              ~/.cargo/registry:/root/.cargo/registry -v $(pwd):/build -w /build builder node
              ./scripts/buildBinary.mjs
            artifacts: moon

    name: Stable - ${{ matrix.settings.target }}
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          architecture: ${{ matrix.settings.architecture }}
          cache: yarn
          check-latest: true
          node-version: 16
      - uses: actions-rs/toolchain@v1
        with:
          override: true
          profile: minimal
          target: ${{ matrix.settings.target }}
          toolchain: stable
      - name: Generate lockfile
        uses: actions-rs/cargo@v1
        with:
          command: generate-lockfile
      - name: Cache cargo registry
        uses: actions/cache@v2
        with:
          path: ~/.cargo/registry
          key:
            ${{ matrix.settings.target }}-node@16-cargo-registry-trimmed-${{
            hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v2
        with:
          path: ~/.cargo/git
          key:
            ${{ matrix.settings.target }}-node@16-cargo-index-trimmed-${{ hashFiles('**/Cargo.lock')
            }}
      - name: Pull latest image
        run: ${{ matrix.settings.docker }}
        if: ${{ matrix.settings.docker }}
        env:
          DOCKER_REGISTRY_URL: ghcr.io
      - name: Build binary
        run: ${{ matrix.settings.build }}
        shell: bash
        env:
          TARGET: ${{ matrix.settings.target }}
      - name: Install dependencies
        run: yarn install
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ${{ matrix.settings.artifacts }}
          if-no-files-found: error

  test-macos-windows-binding:
    name: Test ${{ matrix.settings.target }} - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: windows-latest
            target: x86_64-pc-windows-msvc
        node:
          - '12'
          - '14'
          - '16'
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
          check-latest: true
          cache: yarn
      - name: Install dependencies
        run: yarn install
      - name: List packages
        run: ls -R ./packages/core-darwin-* ./packages/core-win32-*
        shell: bash
      - name: Test bindings
        run: yarn test

  test-linux-x64-gnu-binding:
    name: Test linux-x64-gnu - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node:
          - '12'
          - '14'
          - '16'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
          check-latest: true
          cache: yarn
      - name: Install dependencies
        run: yarn install
      - name: List packages
        run: ls -R ./packages/core-linux-x64-gnu
        shell: bash
      - name: Test bindings
        run: docker run --rm -v $(pwd):/build -w /build node:${{ matrix.node }}-slim yarn test

  test-linux-x64-musl-binding:
    name: Test x86_64-unknown-linux-musl - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node:
          - '12'
          - '14'
          - '16'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
          check-latest: true
          cache: yarn
      - name: Install dependencies
        run: yarn install
      - name: List packages
        run: ls -R ./packages/core-linux-x64-musl
        shell: bash
      - name: Test bindings
        run: docker run --rm -v $(pwd):/build -w /build node:${{ matrix.node }}-alpine yarn test

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs:
      - test-macos-windows-binding
      - test-linux-x64-gnu-binding
      - test-linux-x64-musl-binding
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 16
          check-latest: true
          cache: yarn
      - name: Install dependencies
        run: yarn install
      - name: Download all artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts
      - name: Move artifacts
        run: yarn artifacts
      - name: List packages
        run: ls -R ./packages
        shell: bash
      # - name: Publish
      #   run: |
      #     if git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+$";
      #     then
      #       echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
      #       npm publish --access public
      #     elif git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+";
      #     then
      #       echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
      #       npm publish --tag next --access public
      #     else
      #       echo "Not a release, skipping publish"
      #     fi
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
