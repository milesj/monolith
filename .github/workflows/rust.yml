name: Rust
on:
  push:
    branches:
      - master
  pull_request:
    paths:
      - .cargo/config.toml
      - .github/workflows/rust.yml
      - crates/**
      - tests/**
      - Cargo.lock
      - Cargo.toml
      - Makefile.toml
      - rust-toolchain.toml
env:
  RUST_BACKTRACE: 1
  WITH_COVERAGE: ${{ contains(github.head_ref, 'develop-') || endsWith(github.ref, 'master') }}
jobs:
  format:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: moonrepo/setup-rust@v0
        with:
          components: rustfmt
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: format
      - name: Check formatting
        run: cargo fmt --all --check
  lint:
    name: Lint
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
      - uses: moonrepo/setup-rust@v0
        with:
          bins: make
          components: clippy
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: lint
      - name: Run linter
        run: cargo make lint
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [buildjet-4vcpu-ubuntu-2204, macos-latest, self-hosted-windows-t2-2xl]
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
      - uses: moonrepo/setup-rust@v0
        with:
          bins: make, nextest, llvm-cov
          components: llvm-tools-preview
      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        # https://github.com/Swatinem/rust-cache#known-issues
        if: ${{ runner.os != 'Windows' }}
        with:
          shared-key: test
      - name: Run tests with coverage
        if: ${{ env.WITH_COVERAGE == 'true' }}
        run: cargo make test-coverage
        env:
          NEXTEST_PROFILE: ci
      - name: Run tests
        if: ${{ env.WITH_COVERAGE == 'false' }}
        run: cargo make test
        env:
          NEXTEST_PROFILE: ci
      - name: Generate code coverage
        if: ${{ env.WITH_COVERAGE == 'true' }}
        run: cargo make generate-report
      - run: Get-PSDrive
        if: ${{ runner.os == 'Windows' }}
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        if: ${{ env.WITH_COVERAGE == 'true' }}
        with:
          name: coverage-${{ runner.os }}
          path: ./report.txt
          if-no-files-found: error
  coverage:
    if: ${{ contains(github.head_ref, 'develop-') || endsWith(github.ref, 'master') }}
    name: Code coverage
    runs-on: ubuntu-latest
    needs:
      - test
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        name: Download coverage reports
        with:
          path: coverage
      - uses: codecov/codecov-action@v3
        name: Upload to Codecov
        with:
          files: ./coverage/coverage-Linux/report.txt,./coverage/coverage-macOS/report.txt,./coverage/coverage-Windows/report.txt
          flags: rust
          verbose: true
