name: Rust
on:
  push:
    branches:
      - master
  pull_request:
    paths:
      - .cargo/config.toml
      - .github/workflows/rust.yml
      - crates/**
      - tests/**
      - Cargo.lock
      - Cargo.toml
      - Makefile.toml
      - rust-toolchain.toml
env:
  # Windows fails to compile right now...
  WITH_COVERAGE: ${{ contains(github.head_ref, 'develop-') || endsWith(github.ref, 'master') }}
jobs:
  format:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        name: Setup toolchain
        with:
          toolchain: 1.65.0
          profile: minimal
          components: rustfmt
      - uses: Swatinem/rust-cache@v2
      - uses: actions-rs/cargo@v1
        name: Check formatting
        with:
          command: fmt
          args: --all --check
  lint:
    name: Lint
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        name: Setup toolchain
        with:
          toolchain: 1.65.0
          profile: minimal
          components: clippy
      - uses: Swatinem/rust-cache@v2
      - uses: davidB/rust-cargo-make@v1
      - name: Run linter
        run: cargo make lint
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        name: Setup toolchain
        with:
          toolchain: 1.65.0
          profile: minimal
          components: llvm-tools-preview
      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
      - name: Install cargo-make
        uses: davidB/rust-cargo-make@v1
      - name: Install nextest
        uses: taiki-e/install-action@nextest
      - name: Install grcov
        uses: SierraSoftworks/setup-grcov@v1
        if: ${{ runner.os != 'Windows' && env.WITH_COVERAGE == 'true' }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Run tests with coverage
        if: ${{ runner.os != 'Windows' && env.WITH_COVERAGE == 'true' }}
        run: cargo make test-coverage
        env:
          NEXTEST_PROFILE: ci
      - name: Run tests
        if: ${{ runner.os == 'Windows' || env.WITH_COVERAGE == 'false' }}
        run: cargo make test
        env:
          NEXTEST_PROFILE: ci
      - name: Generate code coverage
        if: ${{ runner.os != 'Windows' && env.WITH_COVERAGE == 'true' }}
        run: cargo make generate-report
      - name: Upload coverage report
        uses: actions/upload-artifact@v2
        if: ${{ runner.os != 'Windows' && env.WITH_COVERAGE == 'true' }}
        with:
          name: coverage-${{ matrix.os }}
          path: ./report.txt
          if-no-files-found: error
  coverage:
    if: ${{ contains(github.head_ref, 'develop-') || endsWith(github.ref, 'master') }}
    name: Code coverage
    runs-on: ubuntu-latest
    needs:
      - test
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v2
        name: Download coverage reports
        with:
          path: coverage
      - uses: codecov/codecov-action@v3
        name: Upload to Codecov
        with:
          files: ./coverage/coverage-ubuntu-latest/report.txt,./coverage/coverage-macos-latest/report.txt
          flags: rust
          verbose: true
