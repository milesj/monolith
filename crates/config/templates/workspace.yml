$schema: 'https://moonrepo.dev/schemas/workspace.json'

# Extend and inherit an external configuration file. Must be a valid HTTPS URL or file system path.
# extends: './shared/workspace.yml'

# REQUIRED: A map of all projects found within the workspace, or a list or file system globs.
# When using a map, each entry requires a unique project ID as the map key, and a file system
# path to the project folder as the map value. File paths are relative from the workspace root,
# and cannot reference projects located outside the workspace boundary.
projects:
  {%- for glob in project_globs | sort %}
  - '{{ glob }}'
  {%- endfor %}
  {%- for id, source in projects %}
  {{ id }}: '{{ source }}'
  {%- endfor %}

# Configures Node.js within the toolchain. moon manages its own version of Node.js
# instead of relying on a version found on the host machine. This ensures deterministic
# and reproducible builds across any machine.
node:
  # The version to use. Must be a semantic version that includes major, minor, and patch.
  # We suggest using the latest active LTS version: https://nodejs.org/en/about/releases
  version: '{{ node_version }}'

  # The package manager to use when managing dependencies.
  # Accepts "npm" (default), "pnpm", or "yarn".
  packageManager: '{{ package_manager }}'

  {%- if package_manager_version != "inherit" %}

  # The version of the package manager (above) to use.
  {{ package_manager }}:
    version: '{{ package_manager_version }}'
  {%- endif %}

  # Add `node.version` as a constaint in the root `package.json` `engines`.
  addEnginesConstraint: true

  # Dedupe dependencies after the lockfile has changed.
  dedupeOnLockfileChange: true

  # Sync a project's `dependsOn` as normal dependencies within the project's
  # `package.json`. Will use "workspace:*" ranges when available in the package manager.
  syncProjectWorkspaceDependencies: true

  # Sync `node.version` to a 3rd-party version manager's config file.
  # Accepts "nodenv" (.node-version), "nvm" (.nvmrc), or none.
  {% if node_version_manager == "nvm" -%}
  syncVersionManagerConfig: 'nvm'
  {%- elif node_version_manager == "nodenv" -%}
  syncVersionManagerConfig: 'nodenv'
  {%- else -%}
  # syncVersionManagerConfig: 'nvm'
  {%- endif %}

# Configures how moon integrates with TypeScript.
typescript:
  # Name of `tsconfig.json` file in project root.
  projectConfigFileName: 'tsconfig.json'

  # Name of `tsconfig.json` file in workspace root.
  rootConfigFileName: 'tsconfig.json'

  # Sync a project's `dependsOn` as TypeScript project references within the
  # project's `tsconfig.json` and the workspace root `tsconfig.json`.
  syncProjectReferences: true

# Configures the version control system to utilize within the workspace. A VCS
# is required for determining touched (added, modified, etc) files, calculating file hashes,
# computing affected files, and much more.
vcs:
  # The manager/binary to use when managing the repository.
  # Accepts "git", or "svn". Defaults to "git".
  manager: 'git'

  # The default branch (master/main/trunk) in the repository for comparing the
  # local branch against. For git, this is is typically "master" or "main",
  # and must include the remote prefix (before /). For svn, this should always be "trunk".
  defaultBranch: 'master'
