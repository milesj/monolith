use cached::proc_macro::cached;
use moon_error::MoonError;
use moon_lang::config_cache;
use moon_lang::LockfileDependencyVersions;
use serde::{Deserialize, Serialize};
use std::collections::HashMap;
use std::fs::File;
use std::io::{prelude::*, BufReader};
use std::path::{Path, PathBuf};

config_cache!(YarnLock, "yarn.lock", load_lockfile, write_lockfile);

#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct YarnLockDependency {
    pub version: String,
}

#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct YarnLock {
    pub dependencies: HashMap<String, YarnLockDependency>,

    #[serde(skip)]
    pub path: PathBuf,
}

// Package names are separated by commas in the following formats:
// "@babel/core@7.12.9":
// "@babel/code-frame@^7.0.0", "@babel/code-frame@^7.10.4", "@babel/code-frame@^7.12.13", "@babel/code-frame@^7.16.0", "@babel/code-frame@^7.18.6", "@babel/code-frame@^7.8.3":
fn extract_package_name(line: &str) -> Option<String> {
    // Remove trailing colon
    let names = &line[0..(line.len() - 1)];

    for name in names.split(", ") {
        let unquoted_name = if name.starts_with('"') {
            &name[1..(name.len() - 1)]
        } else {
            name
        };

        if let Some(at_index) = unquoted_name.rfind('@') {
            return Some(unquoted_name[0..at_index].to_owned());
        }
    }

    None
}

fn load_lockfile<P: AsRef<Path>>(path: P) -> Result<YarnLock, MoonError> {
    let path = path.as_ref();
    let file = File::open(path)?;
    let reader = BufReader::new(file);

    let mut current_package = None;
    let mut lockfile = YarnLock {
        dependencies: HashMap::new(),
        path: PathBuf::new(),
    };

    for line in reader.lines().flatten() {
        if line.is_empty() || line.starts_with('#') {
            continue;
        }

        // Package name is the only line fully left aligned
        if !line.starts_with(' ') {
            current_package = Some(line[0..(line.len() - 1)].to_owned());

            // Extract only the version and skip other fields
        } else if line.starts_with("  version") {
            if let Some(names) = current_package {
                let version = line[11..(line.len() - 1)].to_owned();

                lockfile
                    .dependencies
                    .insert(names, YarnLockDependency { version });

                current_package = None;
            }
        }
    }

    Ok(lockfile)
}

fn write_lockfile(_path: &Path, _lockfile: &YarnLock) -> Result<(), MoonError> {
    Ok(()) // Do nothing
}

#[cached(result)]
pub fn load_lockfile_dependencies(path: PathBuf) -> Result<LockfileDependencyVersions, MoonError> {
    let mut deps: LockfileDependencyVersions = HashMap::new();

    if let Some(lockfile) = YarnLock::read(path)? {
        for (names, dep) in lockfile.dependencies {
            if let Some(name) = extract_package_name(&names) {
                if let Some(versions) = deps.get_mut(&name) {
                    versions.push(dep.version.clone());
                } else {
                    deps.insert(name, vec![dep.version.clone()]);
                }
            }
        }
    }

    Ok(deps)
}

#[cfg(test)]
mod tests {
    use super::*;
    use assert_fs::prelude::*;
    use moon_utils::string_vec;
    use pretty_assertions::assert_eq;

    #[test]
    fn parses_lockfile() {
        let temp = assert_fs::TempDir::new().unwrap();

        temp.child("yarn.lock").write_str(r#"
# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
# yarn lockfile v1


"@algolia/autocomplete-core@1.7.1":
  version "1.7.1"
  resolved "https://registry.yarnpkg.com/@algolia/autocomplete-core/-/autocomplete-core-1.7.1.tgz#025538b8a9564a9f3dd5bcf8a236d6951c76c7d1"
  integrity sha512-eiZw+fxMzNQn01S8dA/hcCpoWCOCwcIIEUtHHdzN5TGB3IpzLbuhqFeTfh2OUhhgkE8Uo17+wH+QJ/wYyQmmzg==
  dependencies:
    "@algolia/autocomplete-shared" "1.7.1"

"@babel/plugin-proposal-optional-chaining@^7.13.12", "@babel/plugin-proposal-optional-chaining@^7.18.9":
  version "7.18.9"
  resolved "https://registry.yarnpkg.com/@babel/plugin-proposal-optional-chaining/-/plugin-proposal-optional-chaining-7.18.9.tgz#e8e8fe0723f2563960e4bf5e9690933691915993"
  integrity sha512-v5nwt4IqBXihxGsW2QmCWMDS3B3bzGIk/EQVZz2ei7f3NJl8NzAJVvUmpDW5q1CRNY+Beb/k58UAH1Km1N411w==
  dependencies:
    "@babel/helper-plugin-utils" "^7.18.9"
    "@babel/helper-skip-transparent-expression-wrappers" "^7.18.9"
    "@babel/plugin-syntax-optional-chaining" "^7.8.3"

repeat-string@^1.0.0, repeat-string@^1.5.4, repeat-string@^1.6.1:
  version "1.6.1"
  resolved "https://registry.yarnpkg.com/repeat-string/-/repeat-string-1.6.1.tgz#8dcae470e1c88abc2d600fff4a776286da75e637"
  integrity sha512-PV0dzCYDNfRi1jCDbJzpW7jNNDRuCOG/jI5ctQcGKt/clZD+YcPS3yIlWuTJMmESC8aevCFmWJy5wjAFgNqN6w==
"#).unwrap();

        let lockfile = load_lockfile(temp.path().join("yarn.lock")).unwrap();

        assert_eq!(
            lockfile,
            YarnLock {
                dependencies: HashMap::from([
                    (
                        "\"@algolia/autocomplete-core@1.7.1\"".into(),
                        YarnLockDependency {
                            version: "1.7.1".into()
                        }
                    ),
                    (
                        "\"@babel/plugin-proposal-optional-chaining@^7.13.12\", \"@babel/plugin-proposal-optional-chaining@^7.18.9\""
                            .into(),
                        YarnLockDependency {
                            version: "7.18.9".into()
                        }
                    ),
                    (
                        "repeat-string@^1.0.0, repeat-string@^1.5.4, repeat-string@^1.6.1".into(),
                        YarnLockDependency {
                            version: "1.6.1".into()
                        }
                    )
                ]),
                ..YarnLock::default()
            }
        );

        assert_eq!(
            load_lockfile_dependencies(temp.path().join("yarn.lock")).unwrap(),
            HashMap::from([
                (
                    "@algolia/autocomplete-core".to_owned(),
                    string_vec!["1.7.1"]
                ),
                (
                    "@babel/plugin-proposal-optional-chaining".to_owned(),
                    string_vec!["7.18.9"]
                ),
                ("repeat-string".to_owned(), string_vec!["1.6.1"])
            ])
        );

        temp.close().unwrap();
    }
}
