use moon_config::{
    GlobalProjectConfig, PlatformType, ProjectConfig, ProjectDependsOn, ProjectLanguage,
    ProjectMetadataConfig, ProjectType, TargetID, TaskCommandArgs, TaskConfig, TaskMergeStrategy,
    TaskOptionsConfig,
};
use moon_project::{Project, ProjectError};
use moon_task::{EnvVars, FileGroup, Target, Task};
use moon_test_utils::{get_fixtures_path, get_fixtures_root};
use moon_utils::string_vec;
use rustc_hash::{FxHashMap, FxHashSet};
use std::collections::BTreeMap;
use std::path::Path;

mod workspace {
    use super::*;
    use moon_task::test::create_expanded_task;

    mod inherited_tasks {
        use super::*;

        fn mock_global_project_config() -> GlobalProjectConfig {
            GlobalProjectConfig {
                file_groups: FxHashMap::default(),
                tasks: BTreeMap::from([
                    (
                        String::from("a"),
                        TaskConfig {
                            command: Some(TaskCommandArgs::String("a".to_owned())),
                            ..TaskConfig::default()
                        },
                    ),
                    (
                        String::from("b"),
                        TaskConfig {
                            command: Some(TaskCommandArgs::String("b".to_owned())),
                            ..TaskConfig::default()
                        },
                    ),
                    (
                        String::from("c"),
                        TaskConfig {
                            command: Some(TaskCommandArgs::String("c".to_owned())),
                            ..TaskConfig::default()
                        },
                    ),
                ]),
                ..GlobalProjectConfig::default()
            }
        }

        fn get_project_task_ids(project: Project) -> Vec<String> {
            let mut ids = project.tasks.into_keys().collect::<Vec<String>>();
            ids.sort();
            ids
        }

        #[test]
        fn include() {
            let project = create_expanded_project(
                "id",
                "include",
                &get_fixtures_path("task-inheritance"),
                &mock_global_project_config(),
            );

            assert_eq!(get_project_task_ids(project), string_vec!["a", "c"])
        }

        #[test]
        fn include_none() {
            let project = create_expanded_project(
                "id",
                "include-none",
                &get_fixtures_path("task-inheritance"),
                &mock_global_project_config(),
            );

            assert_eq!(get_project_task_ids(project), string_vec![])
        }

        #[test]
        fn exclude() {
            let project = create_expanded_project(
                "id",
                "exclude",
                &get_fixtures_path("task-inheritance"),
                &mock_global_project_config(),
            );

            assert_eq!(get_project_task_ids(project), string_vec!["b"])
        }

        #[test]
        fn exclude_all() {
            let project = create_expanded_project(
                "id",
                "exclude-all",
                &get_fixtures_path("task-inheritance"),
                &mock_global_project_config(),
            );

            assert_eq!(get_project_task_ids(project), string_vec![])
        }

        #[test]
        fn exclude_none() {
            let project = create_expanded_project(
                "id",
                "exclude-none",
                &get_fixtures_path("task-inheritance"),
                &mock_global_project_config(),
            );

            assert_eq!(get_project_task_ids(project), string_vec!["a", "b", "c"])
        }

        #[test]
        fn rename() {
            let project = create_expanded_project(
                "id",
                "rename",
                &get_fixtures_path("task-inheritance"),
                &mock_global_project_config(),
            );

            assert_eq!(
                get_project_task_ids(project),
                string_vec!["bar", "baz", "foo"]
            )
        }

        #[test]
        fn rename_merge() {
            let workspace_root = get_fixtures_path("task-inheritance");
            let project = create_expanded_project(
                "id",
                "rename-merge",
                &workspace_root,
                &mock_global_project_config(),
            );

            let mut task =
                create_expanded_task(&workspace_root, &workspace_root.join("rename-merge"), None)
                    .unwrap();
            task.id = "foo".to_owned();
            task.target = Target::new("id", "foo").unwrap();
            task.command = "a".to_owned();
            task.args.push("renamed-and-merge-foo".to_owned());
            task.log_target = "moon:project:id:foo".to_owned();

            assert_eq!(*project.get_task("foo").unwrap(), task);

            assert_eq!(get_project_task_ids(project), string_vec!["b", "c", "foo"]);
        }

        #[test]
        fn include_exclude() {
            let project = create_expanded_project(
                "id",
                "include-exclude",
                &get_fixtures_path("task-inheritance"),
                &mock_global_project_config(),
            );

            assert_eq!(get_project_task_ids(project), string_vec!["a"])
        }

        #[test]
        fn include_exclude_rename() {
            let project = create_expanded_project(
                "id",
                "include-exclude-rename",
                &get_fixtures_path("task-inheritance"),
                &mock_global_project_config(),
            );

            assert_eq!(get_project_task_ids(project), string_vec!["only"])
        }
    }
}
