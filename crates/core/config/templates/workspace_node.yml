# Configures Node.js within the toolchain. moon manages its own version of Node.js
# instead of relying on a version found on the host machine. This ensures deterministic
# and reproducible builds across any machine.
node:
  # The version to use. Must be a semantic version that includes major, minor, and patch.
  # We suggest using the latest active LTS version: https://nodejs.org/en/about/releases
  version: '{{ node_version }}'

  # The package manager to use when managing dependencies.
  # Accepts "npm" (default), "pnpm", or "yarn".
  packageManager: '{{ package_manager }}'

{%- if package_manager_version != "inherit" %}

  # The version of the package manager (above) to use.
  {{ package_manager }}:
    version: '{{ package_manager_version }}'
{%- endif %}

  # Add `node.version` as a constraint in the root `package.json` `engines`.
  addEnginesConstraint: true

  # Use the `package.json` name as an alias for the respective moon project.
{%- if alias_names %}
  aliasPackageNames: 'name-and-scope'
{%- else %}
  # aliasPackageNames: 'name-and-scope'
{%- endif %}

  # Dedupe dependencies after the lockfile has changed.
  dedupeOnLockfileChange: true

  # Version format to use when syncing dependencies within the project's `package.json`.
  # dependencyVersionFormat: 'workspace'

  # Infer and automatically create moon tasks from `package.json` scripts, per project.
  # BEWARE: Tasks and scripts are not 1:1 in functionality, so please refer to the documentation.
  inferTasksFromScripts: {{ infer_tasks }}

  # Sync a project's `dependsOn` as dependencies within the project's `package.json`.
  syncProjectWorkspaceDependencies: true

  # Sync `node.version` to a 3rd-party version manager's config file.
  # Accepts "nodenv" (.node-version), "nvm" (.nvmrc), or none.
{%- if node_version_manager == "nvm" %}
  syncVersionManagerConfig: 'nvm'
{%- elif node_version_manager == "nodenv" %}
  syncVersionManagerConfig: 'nodenv'
{%- else %}
  # syncVersionManagerConfig: 'nvm'
{%- endif %}
