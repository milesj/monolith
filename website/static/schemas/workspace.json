{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "WorkspaceConfig",
  "description": "Configures all aspects of the moon workspace. Docs: https://moonrepo.dev/docs/config/workspace",
  "type": "object",
  "properties": {
    "$schema": {
      "title": "$schema",
      "default": "https://moonrepo.dev/schemas/workspace.json",
      "type": "string"
    },
    "codeowners": {
      "title": "codeowners",
      "description": "Configures code ownership rules for generating a `CODEOWNERS` file.",
      "allOf": [
        {
          "$ref": "#/definitions/CodeownersConfig"
        }
      ]
    },
    "constraints": {
      "title": "constraints",
      "description": "Configures boundaries and constraints between projects.",
      "allOf": [
        {
          "$ref": "#/definitions/ConstraintsConfig"
        }
      ]
    },
    "experiments": {
      "title": "experiments",
      "description": "Configures experiments across the entire moon workspace.",
      "allOf": [
        {
          "$ref": "#/definitions/ExperimentsConfig"
        }
      ]
    },
    "extends": {
      "title": "extends",
      "description": "Extends another workspace configuration file. Supports a relative file path or a secure URL.",
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ]
    },
    "extensions": {
      "title": "extensions",
      "description": "Configures extensions that can be executed with `moon ext`.",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/ExtensionConfig"
      },
      "propertyNames": {
        "type": "string"
      }
    },
    "generator": {
      "title": "generator",
      "description": "Configures the generator for scaffolding from templates.",
      "allOf": [
        {
          "$ref": "#/definitions/GeneratorConfig"
        }
      ]
    },
    "hasher": {
      "title": "hasher",
      "description": "Configures aspects of the content hashing engine.",
      "allOf": [
        {
          "$ref": "#/definitions/HasherConfig"
        }
      ]
    },
    "notifier": {
      "title": "notifier",
      "description": "Configures how and where notifications are sent.",
      "allOf": [
        {
          "$ref": "#/definitions/NotifierConfig"
        }
      ]
    },
    "projects": {
      "title": "projects",
      "description": "Configures all projects within the workspace to create a project graph. Accepts a list of globs, a mapping of projects to relative file paths, or both values.",
      "allOf": [
        {
          "$ref": "#/definitions/WorkspaceProjects"
        }
      ]
    },
    "runner": {
      "title": "runner",
      "description": "Configures aspects of the task runner (also known as the action pipeline).",
      "allOf": [
        {
          "$ref": "#/definitions/RunnerConfig"
        }
      ]
    },
    "telemetry": {
      "title": "telemetry",
      "description": "Collects anonymous usage information, and checks for new moon versions.",
      "default": true,
      "type": "boolean"
    },
    "vcs": {
      "title": "vcs",
      "description": "Configures the version control system (VCS).",
      "allOf": [
        {
          "$ref": "#/definitions/VcsConfig"
        }
      ]
    },
    "versionConstraint": {
      "title": "versionConstraint",
      "description": "Requires a specific version of the `moon` binary.",
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ]
    }
  },
  "additionalProperties": false,
  "definitions": {
    "CodeownersConfig": {
      "title": "CodeownersConfig",
      "description": "Configures code ownership rules for generating a `CODEOWNERS` file.",
      "type": "object",
      "properties": {
        "globalPaths": {
          "title": "globalPaths",
          "description": "Paths that are applied globally to all projects. Can be relative from the workspace root, or a wildcard match for any depth.",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "propertyNames": {
            "type": "string"
          }
        },
        "orderBy": {
          "title": "orderBy",
          "description": "How to order ownership rules within the generated file.",
          "default": "file-source",
          "allOf": [
            {
              "$ref": "#/definitions/CodeownersOrderBy"
            }
          ]
        },
        "syncOnRun": {
          "title": "syncOnRun",
          "description": "Generates a `CODEOWNERS` file after aggregating all ownership rules from each project in the workspace.",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "CodeownersOrderBy": {
      "title": "CodeownersOrderBy",
      "type": "string",
      "enum": [
        "file-source",
        "project-name"
      ]
    },
    "ConstraintsConfig": {
      "title": "ConstraintsConfig",
      "description": "Configures boundaries and constraints between projects.",
      "type": "object",
      "properties": {
        "enforceProjectTypeRelationships": {
          "title": "enforceProjectTypeRelationships",
          "description": "Enforces relationships between projects based on each project's `type` setting.",
          "default": true,
          "type": "boolean"
        },
        "tagRelationships": {
          "title": "tagRelationships",
          "description": "Enforces relationships between projects based on each project's `tags` setting. Requires a mapping of tags, to acceptable tags.",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "propertyNames": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "ExperimentsConfig": {
      "title": "ExperimentsConfig",
      "description": "Configures experiments across the entire moon workspace.",
      "type": "object",
      "properties": {
        "interweavedTaskInheritance": {
          "title": "interweavedTaskInheritance",
          "default": true,
          "deprecated": true,
          "type": "boolean"
        },
        "strictProjectAliases": {
          "title": "strictProjectAliases",
          "description": "Ensure that the a project alias is only used once. Duplicate aliases will trigger a hard failure.",
          "default": true,
          "type": "boolean"
        },
        "taskOutputBoundaries": {
          "title": "taskOutputBoundaries",
          "default": true,
          "deprecated": true,
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "ExtensionConfig": {
      "title": "ExtensionConfig",
      "description": "Configures an individual extension.",
      "type": "object",
      "properties": {
        "config": {
          "title": "config",
          "description": "Arbitrary configuration that'll be passed to the WASM plugin.",
          "type": "object",
          "additionalProperties": {
            "type": [
              "boolean",
              "object",
              "array",
              "number",
              "string",
              "integer"
            ]
          },
          "propertyNames": {
            "type": "string"
          }
        },
        "plugin": {
          "title": "plugin",
          "description": "Location of the WASM plugin to use.",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "GeneratorConfig": {
      "title": "GeneratorConfig",
      "description": "Configures the generator for scaffolding from templates.",
      "type": "object",
      "properties": {
        "templates": {
          "title": "templates",
          "description": "The list of file paths, relative from the workspace root, in which to locate templates.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "HasherConfig": {
      "title": "HasherConfig",
      "description": "Configures aspects of the content hashing engine.",
      "type": "object",
      "properties": {
        "batchSize": {
          "title": "batchSize",
          "description": "The number of files to include in each hash operation.",
          "default": 2500,
          "type": "number"
        },
        "ignoreMissingPatterns": {
          "title": "ignoreMissingPatterns",
          "description": "When `warnOnMissingInputs` is enabled, filters missing file paths from logging a warning.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ignorePatterns": {
          "title": "ignorePatterns",
          "description": "Filters file paths that match a configured glob pattern when a hash is being generated. Patterns are workspace relative, so prefixing with `**` is recommended.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "optimization": {
          "title": "optimization",
          "description": "The optimization to use when hashing.",
          "default": "accuracy",
          "allOf": [
            {
              "$ref": "#/definitions/HasherOptimization"
            }
          ]
        },
        "walkStrategy": {
          "title": "walkStrategy",
          "description": "The strategy to use when walking the file system.",
          "default": "vcs",
          "allOf": [
            {
              "$ref": "#/definitions/HasherWalkStrategy"
            }
          ]
        },
        "warnOnMissingInputs": {
          "title": "warnOnMissingInputs",
          "description": "Logs a warning when a task has configured an explicit file path input, and that file does not exist when hashing.",
          "default": true,
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "HasherOptimization": {
      "title": "HasherOptimization",
      "type": "string",
      "enum": [
        "accuracy",
        "performance"
      ]
    },
    "HasherWalkStrategy": {
      "title": "HasherWalkStrategy",
      "type": "string",
      "enum": [
        "glob",
        "vcs"
      ]
    },
    "NotifierConfig": {
      "title": "NotifierConfig",
      "description": "Configures how and where notifications are sent.",
      "type": "object",
      "properties": {
        "webhookUrl": {
          "title": "webhookUrl",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RunnerConfig": {
      "title": "RunnerConfig",
      "description": "Configures aspects of the task runner (also known as the action pipeline).",
      "type": "object",
      "properties": {
        "archivableTargets": {
          "title": "archivableTargets",
          "description": "List of target's for tasks without outputs, that should be cached and persisted.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "cacheLifetime": {
          "title": "cacheLifetime",
          "description": "The lifetime in which task outputs will be cached.",
          "default": "7 days",
          "type": "string"
        },
        "inheritColorsForPipedTasks": {
          "title": "inheritColorsForPipedTasks",
          "description": "Automatically inherit color settings for all tasks being ran.",
          "default": true,
          "type": "boolean"
        },
        "logRunningCommand": {
          "title": "logRunningCommand",
          "description": "Logs the task's command and arguments when running the task.",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "VcsConfig": {
      "title": "VcsConfig",
      "description": "Configures the version control system (VCS).",
      "type": "object",
      "properties": {
        "defaultBranch": {
          "title": "defaultBranch",
          "description": "The default branch / base.",
          "default": "master",
          "type": "string"
        },
        "hooks": {
          "title": "hooks",
          "description": "A mapping of hooks to commands to run when the hook is triggered.",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "propertyNames": {
            "type": "string"
          }
        },
        "manager": {
          "title": "manager",
          "description": "The VCS client being utilized by the repository.",
          "default": "git",
          "allOf": [
            {
              "$ref": "#/definitions/VcsManager"
            }
          ]
        },
        "provider": {
          "title": "provider",
          "description": "The upstream version control provider, where the repository source code is stored.",
          "default": "github",
          "allOf": [
            {
              "$ref": "#/definitions/VcsProvider"
            }
          ]
        },
        "remoteCandidates": {
          "title": "remoteCandidates",
          "description": "List of remote's in which to compare branches against.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "syncHooks": {
          "title": "syncHooks",
          "description": "Generates hooks and scripts based on the `hooks` setting.",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "VcsManager": {
      "title": "VcsManager",
      "type": "string",
      "enum": [
        "git"
      ]
    },
    "VcsProvider": {
      "title": "VcsProvider",
      "type": "string",
      "enum": [
        "bitbucket",
        "github",
        "gitlab",
        "other"
      ]
    },
    "WorkspaceProjects": {
      "title": "WorkspaceProjects",
      "anyOf": [
        {
          "$ref": "#/definitions/WorkspaceProjectsConfig"
        },
        {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "propertyNames": {
            "type": "string"
          }
        }
      ]
    },
    "WorkspaceProjectsConfig": {
      "title": "WorkspaceProjectsConfig",
      "type": "object",
      "properties": {
        "globs": {
          "title": "globs",
          "description": "A list of globs in which to locate project directories. Can be suffixed with `moon.yml` to only find distinct projects.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sources": {
          "title": "sources",
          "description": "A mapping of project IDs to relative file paths to each project directory.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "propertyNames": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    }
  }
}
