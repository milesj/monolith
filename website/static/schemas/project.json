{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ProjectConfig",
  "description": "Configures information and tasks for a project. Docs: https://moonrepo.dev/docs/config/project",
  "type": "object",
  "required": [
    "$schema",
    "dependsOn",
    "env",
    "fileGroups",
    "id",
    "language",
    "owners",
    "platform",
    "project",
    "tags",
    "tasks",
    "toolchain",
    "type",
    "workspace"
  ],
  "properties": {
    "$schema": {
      "default": "https://moonrepo.dev/schemas/project.json",
      "type": "string"
    },
    "dependsOn": {
      "description": "Other projects that this project depends on.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/ProjectDependsOn"
      }
    },
    "env": {
      "description": "A mapping of environment variables that will be set for all tasks within the project.",
      "type": "object",
      "additionalProperties": {
        "type": "string"
      },
      "propertyNames": {
        "type": "string"
      }
    },
    "fileGroups": {
      "description": "A mapping of group IDs to a list of file paths, globs, and environment variables, that can be referenced from tasks.",
      "type": "object",
      "additionalProperties": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "propertyNames": {
        "type": "string"
      }
    },
    "id": {
      "description": "Overrides the ID within the project graph, as defined in the workspace `projects` setting.",
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ]
    },
    "language": {
      "description": "The primary programming language of the project.",
      "default": "unknown",
      "allOf": [
        {
          "$ref": "#/definitions/LanguageType"
        }
      ]
    },
    "owners": {
      "description": "Defines ownership of source code within the current project, by mapping file paths and globs to owners. An owner is either a user, team, or group.",
      "allOf": [
        {
          "$ref": "#/definitions/OwnersConfig"
        }
      ]
    },
    "platform": {
      "description": "The default platform for all tasks within the project, if their platform is unknown.",
      "default": "unknown",
      "anyOf": [
        {
          "$ref": "#/definitions/PlatformType"
        },
        {
          "type": "null"
        }
      ]
    },
    "project": {
      "description": "Expanded information about the project.",
      "anyOf": [
        {
          "$ref": "#/definitions/ProjectMetadataConfig"
        },
        {
          "type": "null"
        }
      ]
    },
    "tags": {
      "description": "A list of tags that this project blongs to, for categorizing, boundary enforcement, and task inheritance.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "tasks": {
      "description": "A mapping of tasks by ID to parameters required for running the task.",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/TaskConfig"
      },
      "propertyNames": {
        "type": "string"
      }
    },
    "toolchain": {
      "description": "Overrides top-level toolchain settings, scoped to this project.",
      "allOf": [
        {
          "$ref": "#/definitions/ProjectToolchainConfig"
        }
      ]
    },
    "type": {
      "description": "The type of project.",
      "default": "unknown",
      "allOf": [
        {
          "$ref": "#/definitions/ProjectType"
        }
      ]
    },
    "workspace": {
      "description": "Overrides top-level workspace settings, scoped to this project.",
      "allOf": [
        {
          "$ref": "#/definitions/ProjectWorkspaceConfig"
        }
      ]
    }
  },
  "additionalProperties": false,
  "definitions": {
    "DependencyConfig": {
      "title": "DependencyConfig",
      "description": "Expanded information about a project dependency.",
      "type": "object",
      "required": [
        "id",
        "scope",
        "source",
        "via"
      ],
      "properties": {
        "id": {
          "description": "ID of the depended on project.",
          "type": "string"
        },
        "scope": {
          "description": "Scope of the dependency relationship.",
          "default": "production",
          "allOf": [
            {
              "$ref": "#/definitions/DependencyScope"
            }
          ]
        },
        "source": {
          "description": "Source of where the dependeny came from.",
          "default": "explicit",
          "allOf": [
            {
              "$ref": "#/definitions/DependencySource"
            }
          ]
        },
        "via": {
          "description": "Metadata about the source.",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "DependencyScope": {
      "title": "DependencyScope",
      "type": "string",
      "enum": [
        "build",
        "development",
        "peer",
        "production",
        "root"
      ]
    },
    "DependencySource": {
      "title": "DependencySource",
      "type": "string",
      "enum": [
        "explicit",
        "implicit"
      ]
    },
    "LanguageType": {
      "title": "LanguageType",
      "type": "string",
      "enum": [
        "bash",
        "batch",
        "go",
        "javascript",
        "php",
        "python",
        "ruby",
        "rust",
        "typescript",
        "unknown"
      ]
    },
    "OwnersConfig": {
      "title": "OwnersConfig",
      "description": "Defines ownership of source code within the current project, by mapping file paths and globs to owners. An owner is either a user, team, or group.",
      "type": "object",
      "required": [
        "customGroups",
        "defaultOwner",
        "optional",
        "paths",
        "requiredApprovals"
      ],
      "properties": {
        "customGroups": {
          "description": "Bitbucket only. A mapping of custom groups (prefixed with `@@@`), to a list of user and normal groups.",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "propertyNames": {
            "type": "string"
          }
        },
        "defaultOwner": {
          "description": "The default owner for `paths`.",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "optional": {
          "description": "GitLab only. Marks the code owners section as optional.",
          "type": "boolean"
        },
        "paths": {
          "description": "A mapping of file paths and file globs to owners. When a list, the `defaultOwner` is the owner, and each item is a path. When an object, the key is a path, and the value is a list of owners.",
          "allOf": [
            {
              "$ref": "#/definitions/OwnersPaths"
            }
          ]
        },
        "requiredApprovals": {
          "description": "Bitbucket and GitLab only. The number of approvals required for the request to be satisfied. For Bitbucket, utilizes the `Check()` condition. For GitLab, marks the code owners section as required.",
          "default": 1,
          "type": "number"
        }
      },
      "additionalProperties": false
    },
    "OwnersPaths": {
      "title": "OwnersPaths",
      "anyOf": [
        {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "propertyNames": {
            "type": "string"
          }
        }
      ]
    },
    "PlatformType": {
      "title": "PlatformType",
      "type": "string",
      "enum": [
        "bun",
        "deno",
        "node",
        "rust",
        "system",
        "unknown"
      ]
    },
    "ProjectDependsOn": {
      "title": "ProjectDependsOn",
      "anyOf": [
        {
          "type": "string"
        },
        {
          "$ref": "#/definitions/DependencyConfig"
        }
      ]
    },
    "ProjectMetadataConfig": {
      "title": "ProjectMetadataConfig",
      "description": "Expanded information about the project.",
      "type": "object",
      "required": [
        "channel",
        "description",
        "maintainers",
        "name",
        "owner"
      ],
      "properties": {
        "channel": {
          "description": "The Slack, Discord, etc, channel to discuss the project. Must start with a `#`.",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "description": {
          "description": "A description on what the project does, and why it exists.",
          "type": "string"
        },
        "maintainers": {
          "description": "The individual maintainers of the project. The format is unspecified.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "description": "A human-readable name of the project.",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "owner": {
          "description": "The owner of the project. Can be an individual, team, or organization. The format is unspecified.",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "ProjectToolchainCommonToolConfig": {
      "title": "ProjectToolchainCommonToolConfig",
      "description": "Overrides top-level toolchain settings.",
      "type": "object",
      "required": [
        "version"
      ],
      "properties": {
        "version": {
          "description": "Version of the tool this project will use.",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "ProjectToolchainConfig": {
      "title": "ProjectToolchainConfig",
      "description": "Overrides top-level toolchain settings, scoped to this project.",
      "type": "object",
      "required": [
        "bun",
        "deno",
        "node",
        "rust",
        "typescript"
      ],
      "properties": {
        "bun": {
          "description": "Overrides `bun` settings.",
          "anyOf": [
            {
              "$ref": "#/definitions/ProjectToolchainCommonToolConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "deno": {
          "description": "Overrides `deno` settings.",
          "anyOf": [
            {
              "$ref": "#/definitions/ProjectToolchainCommonToolConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "node": {
          "description": "Overrides `node` settings.",
          "anyOf": [
            {
              "$ref": "#/definitions/ProjectToolchainCommonToolConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "rust": {
          "description": "Overrides `rust` settings.",
          "anyOf": [
            {
              "$ref": "#/definitions/ProjectToolchainCommonToolConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "typescript": {
          "description": "Overrides `typescript` settings.",
          "anyOf": [
            {
              "$ref": "#/definitions/ProjectToolchainTypeScriptConfig"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "ProjectToolchainTypeScriptConfig": {
      "title": "ProjectToolchainTypeScriptConfig",
      "description": "Overrides top-level `typescript` settings.",
      "type": "object",
      "required": [
        "disabled",
        "includeProjectReferenceSources",
        "includeSharedTypes",
        "routeOutDirToCache",
        "syncProjectReferences",
        "syncProjectReferencesToPaths"
      ],
      "properties": {
        "disabled": {
          "description": "Disables all TypeScript functionality for this project.",
          "type": "boolean"
        },
        "includeProjectReferenceSources": {
          "description": "Appends sources of project reference to `include` in `tsconfig.json`.",
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "includeSharedTypes": {
          "description": "Appends shared types to `include` in `tsconfig.json`.",
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "routeOutDirToCache": {
          "description": "Updates and routes `outDir` in `tsconfig.json` to moon's cache.",
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "syncProjectReferences": {
          "description": "Syncs all project dependencies as `references` in `tsconfig.json`.",
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "syncProjectReferencesToPaths": {
          "description": "Syncs all project dependencies as `paths` in `tsconfig.json`.",
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "ProjectType": {
      "title": "ProjectType",
      "type": "string",
      "enum": [
        "application",
        "automation",
        "library",
        "tool",
        "unknown"
      ]
    },
    "ProjectWorkspaceConfig": {
      "title": "ProjectWorkspaceConfig",
      "description": "Overrides top-level workspace settings, scoped to this project.",
      "type": "object",
      "required": [
        "inheritedTasks"
      ],
      "properties": {
        "inheritedTasks": {
          "description": "Controls how tasks are inherited.",
          "allOf": [
            {
              "$ref": "#/definitions/ProjectWorkspaceInheritedTasksConfig"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "ProjectWorkspaceInheritedTasksConfig": {
      "title": "ProjectWorkspaceInheritedTasksConfig",
      "description": "Controls how tasks are inherited.",
      "type": "object",
      "required": [
        "exclude",
        "include",
        "rename"
      ],
      "properties": {
        "exclude": {
          "description": "Excludes inheriting tasks by ID.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "include": {
          "description": "Only inherits tasks by ID, and ignores the rest. When not defined, inherits all matching tasks. When an empty list, inherits no tasks.",
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "rename": {
          "description": "Renames inherited tasks to a new ID.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "propertyNames": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "TaskArgs": {
      "title": "TaskArgs",
      "anyOf": [
        {
          "type": "null"
        },
        {
          "type": "string"
        },
        {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      ]
    },
    "TaskConfig": {
      "title": "TaskConfig",
      "description": "Configures a task to be ran within the action pipeline.",
      "type": "object",
      "required": [
        "args",
        "command",
        "deps",
        "env",
        "extends",
        "inputs",
        "local",
        "options",
        "outputs",
        "platform",
        "type"
      ],
      "properties": {
        "args": {
          "description": "Arguments to pass to the command when it's ran. Can be defined as a string, or a list of individual arguments.",
          "allOf": [
            {
              "$ref": "#/definitions/TaskArgs"
            }
          ]
        },
        "command": {
          "description": "The command or command line to execute when the task is ran. Supports the command name, with or without arguments. Can be defined as a string, or a list of individual arguments.",
          "allOf": [
            {
              "$ref": "#/definitions/TaskArgs"
            }
          ]
        },
        "deps": {
          "description": "Other tasks that this task depends on, and must run to completion, before this task is ran. Can depend on sibling tasks, or tasks in other projects, using targets.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskDependency"
          }
        },
        "env": {
          "description": "A mapping of environment variables that will be set when the task is ran.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "propertyNames": {
            "type": "string"
          }
        },
        "extends": {
          "description": "Extends settings from a sibling task by ID.",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "inputs": {
          "description": "Inputs and sources that will mark the task as affected when comparing against touched files. When not provided, all files within the project are considered an input. When an empty list, no files are considered. Otherwise, an explicit list of inputs are considered.",
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "local": {
          "description": "Marks the task as local only. Local tasks do not run in CI, do not have `options.cache` enabled, and are marked as `options.persistent`.",
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "options": {
          "description": "Options to control task inheritance and execution.",
          "allOf": [
            {
              "$ref": "#/definitions/TaskOptionsConfig"
            }
          ]
        },
        "outputs": {
          "description": "Outputs that will be created when the task has successfully ran. When `cache` is enabled, the outputs will be persisted for subsequent runs.",
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "platform": {
          "description": "The platform in which the task will be ran in. The platform determines available binaries, lookup paths, and more. When not provided, will be automatically detected.",
          "default": "unknown",
          "allOf": [
            {
              "$ref": "#/definitions/PlatformType"
            }
          ]
        },
        "type": {
          "description": "The type of task, primarily used for categorical reasons. When not provided, will be automatically determined.",
          "default": "test",
          "anyOf": [
            {
              "$ref": "#/definitions/TaskType"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "TaskDependency": {
      "title": "TaskDependency",
      "anyOf": [
        {
          "type": "string"
        },
        {
          "$ref": "#/definitions/TaskDependencyConfig"
        }
      ]
    },
    "TaskDependencyConfig": {
      "title": "TaskDependencyConfig",
      "description": "Expanded information about a task dependency.",
      "type": "object",
      "required": [
        "args",
        "env",
        "optional",
        "target"
      ],
      "properties": {
        "args": {
          "description": "Additional arguments to pass to this dependency when it's ran.",
          "allOf": [
            {
              "$ref": "#/definitions/TaskArgs"
            }
          ]
        },
        "env": {
          "description": "A mapping of environment variables specific to this dependency.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "propertyNames": {
            "type": "string"
          }
        },
        "optional": {
          "description": "Marks the dependency is optional when being inherited from the top-level.",
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "target": {
          "description": "The target of the depended on task.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "TaskMergeStrategy": {
      "title": "TaskMergeStrategy",
      "type": "string",
      "enum": [
        "append",
        "prepend",
        "replace"
      ]
    },
    "TaskOptionAffectedFiles": {
      "title": "TaskOptionAffectedFiles",
      "anyOf": [
        {
          "type": "boolean"
        },
        {
          "type": "string",
          "enum": [
            "args",
            "env"
          ]
        }
      ]
    },
    "TaskOptionEnvFile": {
      "title": "TaskOptionEnvFile",
      "anyOf": [
        {
          "type": "boolean"
        },
        {
          "type": "string"
        }
      ]
    },
    "TaskOptionsConfig": {
      "title": "TaskOptionsConfig",
      "description": "Options to control task inheritance and execution.",
      "type": "object",
      "required": [
        "affectedFiles",
        "allowFailure",
        "cache",
        "envFile",
        "interactive",
        "mergeArgs",
        "mergeDeps",
        "mergeEnv",
        "mergeInputs",
        "mergeOutputs",
        "outputStyle",
        "persistent",
        "retryCount",
        "runDepsInParallel",
        "runFromWorkspaceRoot",
        "runInCI",
        "shell",
        "unixShell",
        "windowsShell"
      ],
      "properties": {
        "affectedFiles": {
          "description": "The pattern in which affected files will be passed to the task.",
          "anyOf": [
            {
              "$ref": "#/definitions/TaskOptionAffectedFiles"
            },
            {
              "type": "null"
            }
          ]
        },
        "allowFailure": {
          "description": "Allows the task to fail without failing the entire pipeline.",
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "cache": {
          "description": "Caches the `outputs` of the task",
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "envFile": {
          "description": "Loads and sets environment variables from the `.env` file when running the task.",
          "anyOf": [
            {
              "$ref": "#/definitions/TaskOptionEnvFile"
            },
            {
              "type": "null"
            }
          ]
        },
        "interactive": {
          "description": "Marks the task as interactive, so that it will run in isolation, and have direct access to stdin.",
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "mergeArgs": {
          "description": "The strategy to use when merging `args` with an inherited task.",
          "default": "append",
          "anyOf": [
            {
              "$ref": "#/definitions/TaskMergeStrategy"
            },
            {
              "type": "null"
            }
          ]
        },
        "mergeDeps": {
          "description": "The strategy to use when merging `deps` with an inherited task.",
          "default": "append",
          "anyOf": [
            {
              "$ref": "#/definitions/TaskMergeStrategy"
            },
            {
              "type": "null"
            }
          ]
        },
        "mergeEnv": {
          "description": "The strategy to use when merging `env` with an inherited task.",
          "default": "append",
          "anyOf": [
            {
              "$ref": "#/definitions/TaskMergeStrategy"
            },
            {
              "type": "null"
            }
          ]
        },
        "mergeInputs": {
          "description": "The strategy to use when merging `inputs` with an inherited task.",
          "default": "append",
          "anyOf": [
            {
              "$ref": "#/definitions/TaskMergeStrategy"
            },
            {
              "type": "null"
            }
          ]
        },
        "mergeOutputs": {
          "description": "The strategy to use when merging `outputs` with an inherited task.",
          "default": "append",
          "anyOf": [
            {
              "$ref": "#/definitions/TaskMergeStrategy"
            },
            {
              "type": "null"
            }
          ]
        },
        "outputStyle": {
          "description": "The style in which task output will be printed to the console.",
          "default": "buffer",
          "anyOf": [
            {
              "$ref": "#/definitions/TaskOutputStyle"
            },
            {
              "type": "null"
            }
          ]
        },
        "persistent": {
          "description": "Marks the task as persistent (continuously running). This is ideal for watchers, servers, or never-ending processes.",
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "retryCount": {
          "description": "The number of times a failing task will be retried to succeed.",
          "anyOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "runDepsInParallel": {
          "description": "Runs direct task dependencies (via `deps`) in sequential order. This _does not_ apply to indirect or transient dependencies.",
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "runFromWorkspaceRoot": {
          "description": "Runs the task from the workspace root, instead of the project root.",
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "runInCI": {
          "description": "Whether to run the task in CI or not, when executing `moon ci`.",
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "shell": {
          "description": "Runs the task within a shell. When not defined, runs the task directly while relying on `PATH` resolution.",
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "unixShell": {
          "description": "The shell to run the task in when on a Unix-based machine.",
          "anyOf": [
            {
              "$ref": "#/definitions/TaskUnixShell"
            },
            {
              "type": "null"
            }
          ]
        },
        "windowsShell": {
          "description": "The shell to run the task in when on a Windows machine.",
          "anyOf": [
            {
              "$ref": "#/definitions/TaskWindowsShell"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "TaskOutputStyle": {
      "title": "TaskOutputStyle",
      "type": "string",
      "enum": [
        "buffer",
        "buffer-only-failure",
        "hash",
        "none",
        "stream"
      ]
    },
    "TaskType": {
      "title": "TaskType",
      "type": "string",
      "enum": [
        "build",
        "run",
        "test"
      ]
    },
    "TaskUnixShell": {
      "title": "TaskUnixShell",
      "type": "string",
      "enum": [
        "bash",
        "elvish",
        "fish",
        "zsh"
      ]
    },
    "TaskWindowsShell": {
      "title": "TaskWindowsShell",
      "type": "string",
      "enum": [
        "bash",
        "pwsh"
      ]
    }
  }
}
