// Automatically generated by schematic. DO NOT MODIFY!

/* eslint-disable */

export interface DenoConfig {
	depsFile: string;
	lockfile: boolean;
}

export type NodeProjectAliasFormat = 'name-and-scope' | 'name-only';

export type NodeVersionFormat =
	| 'file'
	| 'link'
	| 'star'
	| 'version'
	| 'version-caret'
	| 'version-tilde'
	| 'workspace'
	| 'workspace-caret'
	| 'workspace-tilde';

export interface PartialNpmConfig {
	version?: string | null;
}

export type NodePackageManager = 'npm' | 'pnpm' | 'yarn';

export interface PnpmConfig {
	version: string | null;
}

export type NodeVersionManager = 'nodenv' | 'nvm';

export interface YarnConfig {
	plugins: string[];
	version: string | null;
}

export interface NodeConfig {
	addEnginesConstraint: boolean;
	aliasPackageNames: NodeProjectAliasFormat;
	binExecArgs: string[];
	dedupeOnLockfileChange: boolean;
	dependencyVersionFormat: NodeVersionFormat;
	inferTasksFromScripts: boolean;
	npm: NpmConfig;
	packageManager: NodePackageManager;
	pnpm: PnpmConfig | null;
	syncProjectWorkspaceDependencies: boolean;
	syncVersionManagerConfig: NodeVersionManager | null;
	version: string | null;
	yarn: YarnConfig | null;
}

export interface RustConfig {
	bins: string[];
	syncToolchainConfig: boolean;
	version: string | null;
}

export interface TypeScriptConfig {
	createMissingConfig: boolean;
	projectConfigFileName: string;
	rootConfigFileName: string;
	rootOptionsConfigFileName: string;
	routeOutDirToCache: boolean;
	syncProjectReferences: boolean;
	syncProjectReferencesToPaths: boolean;
}

export interface PartialToolchainConfig {
	$schema?: string | null;
	deno?: DenoConfig | null;
	extends?: string | null;
	node?: NodeConfig | null;
	rust?: RustConfig | null;
	typescript?: TypeScriptConfig | null;
}

export interface NpmConfig {
	version: string | null;
}

export interface ToolchainConfig {
	$schema: string;
	deno: DenoConfig | null;
	extends: string | null;
	node: NodeConfig | null;
	rust: RustConfig | null;
	typescript: TypeScriptConfig | null;
}
